<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Route;
use App\Models\#Module#;
use App\Models\SProperty;
use App\Helpers\ViewHelper;
use App\Helpers\DbHelper;
use App\Helpers\Helper;

class #Module#Controller extends Controller
{
    /**
     * Show the form for creating a new resource.
     */
    public function create(Request $request)
    {
        if (array_key_exists('btnSubmit', $_POST) && $_POST['btnSubmit'] === 'btnCancel') {
            $rc = redirect('/#module#-index');
        } else {
            $rc = null;
            $error = null;
            if (count($_POST) > 0) {
                $fields = $_POST;
                try {
                    $incomingFields = $request->validate($this->rules(true));
                    $rc = $this->store($request);
                } catch(\Exception $e ){ 
                    $error = $e->getMessage();
                }
            } else {
                $fields = [
##FIELDS##
                    '#field#' => '',
##END.FIELDS##
                ];
            }
            if ($rc == null){
                $optionsXXX = SProperty::optionsByScope('scopeXXX', $fields['xxx'], '-');
                $optionsYYY = SProperty::optionsByScope('scopeYYY', $fields['yyy'], '-');
                $rc = view('#module#.create', [
                    'fields' => $fields,
                    'optionsXXX' => $optionsXXX,
                    'optionsYYY' => $optionsYYY,
                    'error' => $error]);
            }
        }
        return $rc;
    }
    /**
     * Show the form for editing the specified resource.
     */
    public function edit(#Module# $#module#)
    {
        if (array_key_exists('btnSubmit', $_POST) && $_POST['btnSubmit'] === 'btnCancel') {
            $rc = redirect('/#module#-index');
        } else {
            $optionsXXX = SProperty::optionsByScope('scopeXXX', $#module#->xxx, '');
            $optionsYYY = SProperty::optionsByScope('scopeYYY', $#module#->yyy, '');
            $rc = view('#module#.edit', [
                '#module#' => $#module#,
                'optionsXXX' => $optionsXXX,
                'optionsYYY' => $optionsYYY,
                ]);
        }
        return $rc;
    }
    /**
     * Remove the specified resource from storage.
     */
    public function destroy(#Module# $#module#, Request $request)
    {
        if (array_key_exists('btnSubmit', $_POST) && $_POST['btnSubmit'] === 'btnDelete') {
            $#module#->delete();
        }
        return redirect('/#module#-index');
    }
    /**
     * Display the database records of the resource.
     */
    public function index()
    {
        if (array_key_exists('btnSubmit', $_POST) && $_POST['btnSubmit'] === 'btnNew') {
            return redirect('/#module#-create');
        } else {
            // $sql = 'SELECT t0.*, t1.name as category FROM #table#' 
            //   . 'LEFT JOIN sproperty t1 ON t0.xxx_id=t1.name LEFT JOIN sproperty t2 ON t0.yyy_id=t2.name';
            $sql = 'SELECT * FROM #table#';
            $parameters = [];
            if (count($_POST) == 0) {
                $fields = [
##FIELDS##
                    '#field#' => '',
##END.FIELDS##
                '_sortParams' => 'id:asc;#secondary#:desc'
                ];
            } else {
                $fields = $_POST;
                $conditions = [];
                ViewHelper::addConditionComparism($conditions, $parameters, '#secondary#');
                ViewHelper::addConditionPattern($conditions, $parameters, 'scope,name,shortname,value,info', 'text');
                $sql = DbHelper::addConditions($sql, $conditions);
            }
            $sql = DbHelper::addOrderBy($sql, $fields['_sortParams']);
            $records = DB::select($sql, $parameters);
            $pagination = new Pagination($sql, $parameters, $fields);
            $optionsXXX = SProperty::optionsByScope('scopeXXX', $fields['xxx'], 'all');
            $optionsYYY = SProperty::optionsByScope('scopeYYY', $fields['yyy'], 'all');
            return view('#module#.index', [
                'records' => $records,
                'fields' => $fields,
                'optionsXXX' => $optionsXXX,
                'optionsYYY' => $optionsYYY,
                'pagination' => $pagination
            ]);
        }
    }
    /**
     * Returns the validation rules.
     * @return array<string, string> The validation rules.
     */
    private function rules(bool $isCreate=false): array
    {
        $rc = [
##FIELDS##
            '#field#' => 'required',
##END.FIELDS##
        ];
        return $rc;
    }
    public static function routes()
    {
        Route::get('/#module#-index', [#Module#Controller::class, 'index']);
        Route::post('/#module#-index', [#Module#Controller::class, 'index']);
        Route::get('/#module#-create', [#Module#Controller::class, 'create']);
        Route::post('/#module#-create', [#Module#Controller::class, 'create']);
        Route::put('/#module#-create', [#Module#Controller::class, 'store']);
        Route::post('/#module#-edit/{#module#}', [#Module#Controller::class, 'edit']);
        Route::get('/#module#-edit/{#module#}', [#Module#Controller::class, 'edit']);
        Route::post('/#module#-update/{#module#}', [#Module#Controller::class, 'update']);
        Route::get('/#module#-show/{#module#}/delete', [#Module#Controller::class, 'show']);
        Route::delete('/#module#-show/{#module#}/delete', [#Module#Controller::class, 'destroy']);
    }
    /**
     * Display the specified resource.
     */
    public function show(#Module# $#module#)
    {
        if (array_key_exists('btnSubmit', $_POST) && $_POST['btnSubmit'] === 'btnCancel') {
            $rc = redirect('/#module#-index');
        } else {
            $optionsXXX = SProperty::optionsByScope('scopeXXX', $fields['xxx']);
            $optionsYYY = SProperty::optionsByScope('scopeYYY', $fields['xxx']);
            $rc = view('#module#.show', [
                '#module#' => $#module#, 
                'optionsXXX' => $optionsXXX;
                'optionsYYY' => $optionsYYY;
                'optionsXXX' => $optionsXXX,
                'optionsYYY' => $optionsYYY,
                'mode' => 'delete'
                ]);
        }
        return $rc;
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        if ($request->btnSubmit === 'btnStore') {
            $incomingFields = $request->validate($this->rules());
            $incomingFields['info'] = strip_tags($incomingFields['info']);
            #Module#::create($incomingFields);
        }
        return redirect('/#module#-index');
    }
    /**
     * Update the specified resource in storage.
     */
    public function update(#Module# $#module#, Request $request)
    {
        $rc = null;
        if ($request->btnSubmit === 'btnStore') {
            try {
                $incomingFields = $request->validate($this->rules());
                $incomingFields['info'] = strip_tags($incomingFields['info']);
                $#module#->update($incomingFields);
                $rc = redirect('/#module#-index');
            } catch (\Exception $exc) {
                $msg = $exc->getMessage();
                $rc = back();
            }
        }
        if ($rc == null){
            $rc = redirect('/#module#-index');
        }
        return $rc;
    }
}
