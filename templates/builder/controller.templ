<?php

namespace App\Http\Controllers;

use App\Models\#Module#;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Route;
use Hamatoma\Laraknife\ViewHelpers;

class #Module#Controller extends Controller
{
    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('#module#.create');
    }
    /**
     * Show the form for editing the specified resource.
     */
    public function edit(#Module# $#module#)
    {
        return view('#module#.edit', ['#module#' => $#module#]);
    }
    /**
     * Remove the specified resource from storage.
     */
    public function destroy(#Module# $#module#)
    {
        $#module#->delete();
        return redirect('/#module#-index');
    }
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        if (array_key_exists('btnSubmit', $_POST) && $_POST['btnSubmit'] == 'btnNew') {
            return redirect('/#module#-create');
        } else {
            $records = null;
            if (count($_POST) == 0) {
                $fields = [
##FIELDS##
                    '#field#' => '',
##END.FIELDS##
                ];
            } else {
                $fields = $_POST;
                $conditions = [];
                $parameters = [];
                ViewHelpers::addConditionComparism($conditions, $parameters, '#secondary#');
                ViewHelpers::addConditionPattern($conditions, $parameters, 'scope,name,shortname,value,info', 'text');
                if (count($conditions) > 0) {
                    $condition = count($conditions) == 1 ? $conditions[0] : implode(' AND ', $conditions);
                    $records = DB::select("select * from #table# where $condition order by scope,`order`,id", $parameters);
                }
            }
            if ($records === null) {
                $records = #Module#::orderBy('scope')->orderBy('order')->orderBy('id')->get();
            }
            $scopes = #Module#::scopes();
            $options = ViewHelpers::buildEntriesOfCombobox($scopes, null, 
                isset($fields['scope']) ? $fields['scope'] : '', '<all>', true);
            return view('#module#.index', [
                'records' => $records,
                'fields' => $fields,
                'options' => $options,
                'legend' => ''
            ]);
        }
    }
    /**
     * Returns the validation rules.
     * @return array<string, string> The validation rules.
     */
    private function rules(): array
    {
        $rc = [
##FIELDS##
            '#field#' => 'required',
##END.FIELDS##
        ];
        return $rc;
    }
    public static function routes()
    {
        Route::get('/#module#-index', [#Module#Controller::class, 'index']);
        Route::post('/#module#-index', [#Module#Controller::class, 'index']);
        Route::get('/#module#-create', [#Module#Controller::class, 'create']);
        Route::post('/#module#-create', [#Module#Controller::class, 'create']);
        Route::put('/#module#-create', [#Module#Controller::class, 'store']);
        Route::get('/#module#-edit/{#module#}', [#Module#Controller::class, 'edit']);
        Route::post('/#module#-update/{#module#}', [#Module#Controller::class, 'update']);
        Route::get('/#module#-show/{#module#}/delete', [#Module#Controller::class, 'show']);
        Route::delete('/#module#-show/{#module#}/delete', [#Module#Controller::class, 'destroy']);
    }
    /**
     * Display the specified resource.
     */
    public function show(#Module# $#module#)
    {
        return view('#module#.show', ['#module#' => $#module#, 'mode' => 'delete']);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        if ($request->btnSubmit == 'btnStore') {
            $incomingFields = $request->validate($this->rules());
            $incomingFields['info'] = strip_tags($incomingFields['info']);
            #Module#::create($incomingFields);
        }
        return redirect('/#module#-index');
    }
    /**
     * Update the specified resource in storage.
     */
    public function update(#Module# $#module#, Request $request)
    {
        if ($request->btnSubmit == 'btnStore') {
            $incomingFields = $request->validate($this->rules());
            $incomingFields['info'] = strip_tags($incomingFields['info']);
            $#module#->update($incomingFields);
        }
        return redirect('/#module#-index');
    }
}
