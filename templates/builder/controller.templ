<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Validator;
use App\Models\#Module#;
use App\Models\SProperty;
use App\Helpers\ContextLaraKnife;
use App\Helpers\ViewHelper;
use App\Helpers\DbHelper;
use App\Helpers\Helper;
use App\Helpers\Pagination;

class #Module#Controller extends Controller
{
    /**
     * Show the form for creating a new resource.
     */
    public function create(Request $request)
    {
        if ($request->btnSubmit === 'btnCancel') {
            $rc = redirect('/#module#-index');
        } else {
            $fields = $request->all();
            if (count($fields) === 0) {
                $fields = [
##CASE(fields)##
##ON nameLike(.)##
                    '#field#' => ''#comma#
##END.CASE##
                ];
            }
##CASE(fields)##
##ON nameLike(_scope$)##
            $options#Base# = SProperty::optionsByScope('#base#', $fields['#field#'], '-');
##ON nameLike(_id$)##
            $options#Base# = DbHelper::comboboxDataOfTable('#base#s', 'name', 'id', $fields['#field#'], __('<Please select>'));
##END.CASE##
            $context = new ContextLaraKnife($request, $fields);     
            $rc = view('#module#.create', [
                'context' => $context,
##CASE(fields)##
##ON nameLike(_(scope|id)$)##
                'options#Base#' => $options#Base#,
##END.CASE##
                ]);
        }
        return $rc;
    }
    /**
     * Show the form for editing the specified resource.
     */
    public function edit(#Module# $#module#, Request $request)
    {
        if ($request->btnSubmit === 'btnCancel') {
            $rc = redirect('/#module#-index');
        } else {
            $fields = $request->all();
            if (count($fields) === 0) {
                $fields = [
##CASE(fields)##
##ON nameLike(.)##
                    '#field#' => ''#comma#
##END.CASE##
                    ];
            }
##CASE(fields)##
##ON nameLike(_scope$)##
            $options#Base# = SProperty::optionsByScope('#base#', $#module#->#field#, '');
##ON nameLike(_id$)##
            $options#Base# = DbHelper::comboboxDataOfTable('#base#s', 'name', 'id', $#module#->#field#, __('<Please select>'));
##END.CASE##        
            $context = new ContextLaraKnife($request, null, $#module#);
            $rc = view('#module#.edit', [
                'context' => $context,
##CASE(fields)##
##ON nameLike(_(id|scope)$)##
                'options#Base#' => $options#Base#,
##END.CASE##
                ]);
        }
        return $rc;
    }
    /**
     * Remove the specified resource from storage.
     */
    public function destroy(#Module# $#module#, Request $request)
    {
        if ($request->btnSubmit === 'btnDelete') {
            $#module#->delete();
        }
        return redirect('/#module#-index');
    }
    /**
     * Display the database records of the resource.
     */
    public function index(Request $request)
    {
        if ($request->btnSubmit === 'btnNew') {
            return redirect('/#module#-create');
        } else {
            $sql = 'SELECT t0.*#Comma#'
##CASE(fields)##
##ON nameLike(_(scope|id)$)##
                . 't#no#.name as #field##comma# '
##END.CASE##
                . ' FROM #table# t0'
##CASE(fields)##
##ON nameLike(_(scope|id)$)##
                . ' LEFT JOIN sproperties t#no# ON t#no#.id=t0.#field#'
##END.CASE##
                ;
            $parameters = [];
            $fields = $request->all();
            if (count($fields) == 0) {
                $fields = [
##CASE(fields)##
##ON nameLike(_(scope|id)$)##
                '#base#' => '',
##ELSE##
                '#field#' => '',
##END.CASE##
                '_sortParams' => 'id:asc' 
##CASE(fields)##
##ON isSecondary##
                                . ';#field#:desc'
##END.CASE##
                ];
            } else {
                $conditions = [];
##CASE(fields)##
##ON nameLike(_(scope|id)$)##
                ViewHelper::addConditionComparism($conditions, $parameters, '#field#', '#base#');
##ON typeLike((tring|[tT]ext)$)##
                ViewHelper::addConditionPattern($conditions, $parameters, '#field#,other_field', 'text');
##ELSE##
                ViewHelper::addConditionComparism($conditions, $parameters, '#field#', null, '=');
##END.CASE##
                $sql = DbHelper::addConditions($sql, $conditions);
            }
            $sql = DbHelper::addOrderBy($sql, $fields['_sortParams']);
            $pagination = new Pagination($sql, $parameters, $fields);
            $records = $pagination->records;
##CASE(fields)##
##ON nameLike(_scope$)##
            $options#Base# = SProperty::optionsByScope('#base#', $fields['#base#'], 'all');
##ON nameLike(_id$)##
            $options#Base# = DbHelper::comboboxDataOfTable('#base#s', 'name', 'id', $fields['#base#']);
##END.CASE##
            $context = new ContextLaraKnife($request, $fields);
            return view('#module#.index', [
                'context' => $context,
                'records' => $records,
##CASE(fields)##
##ON nameLike((_scope|id)$)##
                'options#Base#' => $options#Base#,
##END.CASE##
                'pagination' => $pagination
            ]);
        }
    }
    /**
     * Returns the validation rules.
     * @return array<string, string> The validation rules.
     */
    private function rules(bool $isCreate=false): array
    {
        $rc = [
##CASE(fields)##
##ON nameLike(.)##
            '#field#' => 'required'#comma#
##END.CASE##
        ];
        return $rc;
    }
    public static function routes()
    {
        Route::get('/#module#-index', [#Module#Controller::class, 'index'])->middleware('auth');
        Route::post('/#module#-index', [#Module#Controller::class, 'index'])->middleware('auth');
        Route::get('/#module#-create', [#Module#Controller::class, 'create'])->middleware('auth');
        Route::put('/#module#-store', [#Module#Controller::class, 'store'])->middleware('auth');
        Route::post('/#module#-edit/{#module#}', [#Module#Controller::class, 'edit'])->middleware('auth');
        Route::get('/#module#-edit/{#module#}', [#Module#Controller::class, 'edit'])->middleware('auth');
        Route::post('/#module#-update/{#module#}', [#Module#Controller::class, 'update'])->middleware('auth');
        Route::get('/#module#-show/{#module#}/delete', [#Module#Controller::class, 'show'])->middleware('auth');
        Route::delete('/#module#-show/{#module#}/delete', [#Module#Controller::class, 'destroy'])->middleware('auth');
    }
    /**
     * Display the specified resource.
     */
    public function show(#Module# $#module#, Request $request)
    {
        if ($request->btnSubmit === 'btnCancel') {
            $rc = redirect('/#module#-index')->middleware('auth');
        } else {
##CASE(fields)##
##ON nameLike(_scope$)##
            $options#Base# = SProperty::optionsByScope('#base#', $#module#->#field#, '');
##ON nameLike(_id$)##
            $options#Base# = DbHelper::comboboxDataOfTable('#base#s', 'name', 'id', $#module#->#field#, __('<Please select>'));
##END.CASE##
            $context = new ContextLaraKnife($request, null, $#module#);
            $rc = view('#module#.show', [
                'context' => $context,
##CASE(fields)##
##ON nameLike(_(id|scope)$)##
                'options#Base#' => $options#Base#,
##END.CASE##
                'mode' => 'delete'
                ]);
        }
        return $rc;
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $rc = null;
        if ($request->btnSubmit === 'btnStore') {
            $fields = $request->all();
            $validator = Validator::make($fields, $this->rules(true));
            if ($validator->fails()) {
                $rc = back()->withErrors($validator)->withInput();
            } else {
                $validated = $validator->validated();
##CASE(fields)##
##ON typeLike([tT]ext$)##
            $validated['#field#'] = strip_tags($validated['#field#']);
##END.CASE##            
                #Module#::create($validated);
            }
        }
        if ($rc == null){
            $rc = redirect('/#module#-index');
        }
        return $rc;
    }
    /**
     * Update the specified resource in storage.
     */
    public function update(#Module# $#module#, Request $request)
    {
        $rc = null;
        if ($request->btnSubmit === 'btnStore') {
            $fields = $request->all();
            $validator = Validator::make($fields, $this->rules(false, $#module#));
            if ($validator->fails()) {
                $rc = back()->withErrors($validator)->withInput();
            } else {
                $validated = $validator->validated();
##CASE(fields)##
##ON typeLike([tT]ext$)##
                $validated['#field#'] = strip_tags($validated['#field#']);
##END.CASE##            
                $#module#->update($validated);
            }
        }
        if ($rc == null){
            $rc = redirect('/#module#-index');
        }
        return $rc;
    }
}
